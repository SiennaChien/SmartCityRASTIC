# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cav_project/limo_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class limo_state(genpy.Message):
  _md5sum = "a1fba4736fa7b1723499e2717d3f0429"
  _type = "cav_project/limo_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string limoID
float64 vel
float64 d0
float64 d1
float64 v1
float64 d2
float64 v2
float64 vd
"""
  __slots__ = ['limoID','vel','d0','d1','v1','d2','v2','vd']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       limoID,vel,d0,d1,v1,d2,v2,vd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(limo_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.limoID is None:
        self.limoID = ''
      if self.vel is None:
        self.vel = 0.
      if self.d0 is None:
        self.d0 = 0.
      if self.d1 is None:
        self.d1 = 0.
      if self.v1 is None:
        self.v1 = 0.
      if self.d2 is None:
        self.d2 = 0.
      if self.v2 is None:
        self.v2 = 0.
      if self.vd is None:
        self.vd = 0.
    else:
      self.limoID = ''
      self.vel = 0.
      self.d0 = 0.
      self.d1 = 0.
      self.v1 = 0.
      self.d2 = 0.
      self.v2 = 0.
      self.vd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.limoID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.vd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.limoID = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.limoID = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.vd,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.limoID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.vd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.limoID = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.limoID = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.vd,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
