// Generated by gencpp from file cav_project/limo_info.msg
// DO NOT EDIT!


#ifndef CAV_PROJECT_MESSAGE_LIMO_INFO_H
#define CAV_PROJECT_MESSAGE_LIMO_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>

namespace cav_project
{
template <class ContainerAllocator>
struct limo_info_
{
  typedef limo_info_<ContainerAllocator> Type;

  limo_info_()
    : vel()  {
    }
  limo_info_(const ContainerAllocator& _alloc)
    : vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::cav_project::limo_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cav_project::limo_info_<ContainerAllocator> const> ConstPtr;

}; // struct limo_info_

typedef ::cav_project::limo_info_<std::allocator<void> > limo_info;

typedef boost::shared_ptr< ::cav_project::limo_info > limo_infoPtr;
typedef boost::shared_ptr< ::cav_project::limo_info const> limo_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cav_project::limo_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cav_project::limo_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cav_project::limo_info_<ContainerAllocator1> & lhs, const ::cav_project::limo_info_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cav_project::limo_info_<ContainerAllocator1> & lhs, const ::cav_project::limo_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cav_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cav_project::limo_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cav_project::limo_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cav_project::limo_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cav_project::limo_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cav_project::limo_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cav_project::limo_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cav_project::limo_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2990a44cec4fde7af6f58f2727169f0";
  }

  static const char* value(const ::cav_project::limo_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2990a44cec4fde7ULL;
  static const uint64_t static_value2 = 0xaf6f58f2727169f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cav_project::limo_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cav_project/limo_info";
  }

  static const char* value(const ::cav_project::limo_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cav_project::limo_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 vel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::cav_project::limo_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cav_project::limo_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct limo_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cav_project::limo_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cav_project::limo_info_<ContainerAllocator>& v)
  {
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAV_PROJECT_MESSAGE_LIMO_INFO_H
