// Generated by gencpp from file cav_project/ControlInfo.msg
// DO NOT EDIT!


#ifndef CAV_PROJECT_MESSAGE_CONTROLINFO_H
#define CAV_PROJECT_MESSAGE_CONTROLINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cav_project
{
template <class ContainerAllocator>
struct ControlInfo_
{
  typedef ControlInfo_<ContainerAllocator> Type;

  ControlInfo_()
    : steering_angle(0.0)
    , desired_velocity(0.0)
    , control_input(0.0)
    , vel(0.0)
    , d1(0.0)
    , d2(0.0)  {
    }
  ControlInfo_(const ContainerAllocator& _alloc)
    : steering_angle(0.0)
    , desired_velocity(0.0)
    , control_input(0.0)
    , vel(0.0)
    , d1(0.0)
    , d2(0.0)  {
  (void)_alloc;
    }



   typedef double _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef double _desired_velocity_type;
  _desired_velocity_type desired_velocity;

   typedef double _control_input_type;
  _control_input_type control_input;

   typedef double _vel_type;
  _vel_type vel;

   typedef double _d1_type;
  _d1_type d1;

   typedef double _d2_type;
  _d2_type d2;





  typedef boost::shared_ptr< ::cav_project::ControlInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cav_project::ControlInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ControlInfo_

typedef ::cav_project::ControlInfo_<std::allocator<void> > ControlInfo;

typedef boost::shared_ptr< ::cav_project::ControlInfo > ControlInfoPtr;
typedef boost::shared_ptr< ::cav_project::ControlInfo const> ControlInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cav_project::ControlInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cav_project::ControlInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cav_project::ControlInfo_<ContainerAllocator1> & lhs, const ::cav_project::ControlInfo_<ContainerAllocator2> & rhs)
{
  return lhs.steering_angle == rhs.steering_angle &&
    lhs.desired_velocity == rhs.desired_velocity &&
    lhs.control_input == rhs.control_input &&
    lhs.vel == rhs.vel &&
    lhs.d1 == rhs.d1 &&
    lhs.d2 == rhs.d2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cav_project::ControlInfo_<ContainerAllocator1> & lhs, const ::cav_project::ControlInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cav_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cav_project::ControlInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cav_project::ControlInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cav_project::ControlInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cav_project::ControlInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cav_project::ControlInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cav_project::ControlInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cav_project::ControlInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c8087d5e0337d333edf508e1afaee4b";
  }

  static const char* value(const ::cav_project::ControlInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c8087d5e0337d33ULL;
  static const uint64_t static_value2 = 0x3edf508e1afaee4bULL;
};

template<class ContainerAllocator>
struct DataType< ::cav_project::ControlInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cav_project/ControlInfo";
  }

  static const char* value(const ::cav_project::ControlInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cav_project::ControlInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 steering_angle\n"
"float64 desired_velocity\n"
"float64 control_input\n"
"float64 vel\n"
"float64 d1\n"
"float64 d2\n"
;
  }

  static const char* value(const ::cav_project::ControlInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cav_project::ControlInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_angle);
      stream.next(m.desired_velocity);
      stream.next(m.control_input);
      stream.next(m.vel);
      stream.next(m.d1);
      stream.next(m.d2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cav_project::ControlInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cav_project::ControlInfo_<ContainerAllocator>& v)
  {
    s << indent << "steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "desired_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.desired_velocity);
    s << indent << "control_input: ";
    Printer<double>::stream(s, indent + "  ", v.control_input);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "d1: ";
    Printer<double>::stream(s, indent + "  ", v.d1);
    s << indent << "d2: ";
    Printer<double>::stream(s, indent + "  ", v.d2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAV_PROJECT_MESSAGE_CONTROLINFO_H
