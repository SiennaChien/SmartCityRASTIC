# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cav_project/limo_state_matrix.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cav_project.msg

class limo_state_matrix(genpy.Message):
  _md5sum = "16904eb3a77a18c79afd9f6ff63a6e61"
  _type = "cav_project/limo_state_matrix"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """limo_state[] limos

================================================================================
MSG: cav_project/limo_state
string limoID
float64 vel
float64 d0
float64 d1
float64 v1
float64 d2
float64 v2
float64 l2
float64 d3
float64 v3
float64 l3
float64 vd
"""
  __slots__ = ['limos']
  _slot_types = ['cav_project/limo_state[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       limos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(limo_state_matrix, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.limos is None:
        self.limos = []
    else:
      self.limos = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.limos)
      buff.write(_struct_I.pack(length))
      for val1 in self.limos:
        _x = val1.limoID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_11d().pack(_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.l2, _x.d3, _x.v3, _x.l3, _x.vd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.limos is None:
        self.limos = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.limos = []
      for i in range(0, length):
        val1 = cav_project.msg.limo_state()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.limoID = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.limoID = str[start:end]
        _x = val1
        start = end
        end += 88
        (_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.l2, _x.d3, _x.v3, _x.l3, _x.vd,) = _get_struct_11d().unpack(str[start:end])
        self.limos.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.limos)
      buff.write(_struct_I.pack(length))
      for val1 in self.limos:
        _x = val1.limoID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_11d().pack(_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.l2, _x.d3, _x.v3, _x.l3, _x.vd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.limos is None:
        self.limos = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.limos = []
      for i in range(0, length):
        val1 = cav_project.msg.limo_state()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.limoID = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.limoID = str[start:end]
        _x = val1
        start = end
        end += 88
        (_x.vel, _x.d0, _x.d1, _x.v1, _x.d2, _x.v2, _x.l2, _x.d3, _x.v3, _x.l3, _x.vd,) = _get_struct_11d().unpack(str[start:end])
        self.limos.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
